# Generated by Django 3.1.4 on 2021-04-05 13:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('language', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the book.', max_length=100, verbose_name='Book Name')),
                ('description', models.TextField(blank=True, help_text='Description about the book.', verbose_name='Description')),
                ('year', models.DateField(blank=True, help_text='Year of the publishing the book.', null=True, verbose_name='Publish Year')),
                ('edition_number', models.IntegerField(blank=True, help_text='Number of the book edition.', null=True, verbose_name='Edition Number')),
                ('volume', models.IntegerField(blank=True, help_text='Number of the book volume.', null=True, verbose_name='Volume Number')),
                ('part', models.IntegerField(blank=True, help_text='Number of the book part.', null=True, verbose_name='Part Number')),
                ('page_quantity', models.IntegerField(help_text='Quantity of the book pages.', verbose_name='Page Quantity')),
                ('is_copyright', models.BooleanField(default=False, help_text='For determine if the book is copyrighted ', verbose_name='Is copyright?')),
                ('image', models.ImageField(default='default_book.jpg', help_text='Picture of the book.', upload_to='book_pics', verbose_name='Image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='books', related_query_name='book', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'book',
                'verbose_name_plural': 'books',
            },
        ),
        migrations.CreateModel(
            name='BookHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the book.', max_length=100, verbose_name='Book Name')),
                ('description', models.TextField(blank=True, help_text='Description about the book.', verbose_name='Description')),
                ('year', models.DateField(blank=True, help_text='Year of the publishing the book.', null=True, verbose_name='Publish Year')),
                ('edition_number', models.IntegerField(blank=True, help_text='Number of the book edition.', null=True, verbose_name='Edition Number')),
                ('volume', models.IntegerField(blank=True, help_text='Number of the book volume.', null=True, verbose_name='Volume Number')),
                ('part', models.IntegerField(blank=True, help_text='Number of the book part.', null=True, verbose_name='Part Number')),
                ('page_quantity', models.IntegerField(blank=True, help_text='Quantity of the book pages.', null=True, verbose_name='Page Quantity')),
                ('is_copyright', models.BooleanField(default=False, help_text='For determine if the book is copyrighted ', verbose_name='Is copyright?')),
                ('image', models.ImageField(default='default_book.jpg', help_text='Picture of the book.', upload_to='book_pics', verbose_name='Image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_histories', related_query_name='book_history', to='library.book', verbose_name='Location Id')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='book_histories', related_query_name='book_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
            ],
            options={
                'verbose_name': 'book history ',
                'verbose_name_plural': 'book histories',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the genre.', max_length=100, verbose_name='Genre Name')),
                ('description', models.TextField(blank=True, help_text='Description about the genre.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='genres', related_query_name='genre', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'genre',
                'verbose_name_plural': 'genres',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the job.', max_length=100, verbose_name='Job Name')),
                ('description', models.TextField(blank=True, help_text='Description about the job.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='jobs', related_query_name='job', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'job',
                'verbose_name_plural': 'jobs',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the location.', max_length=100, verbose_name='Location Name')),
                ('description', models.TextField(blank=True, help_text='Description about the location.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='locations', related_query_name='location', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Number of the page(1,2,... | a,b,...).', max_length=100, verbose_name='Page Number')),
                ('page_type', models.SmallIntegerField(choices=[(1, 'Page'), (2, 'Page')], default=1, help_text='Type of page.', verbose_name='Page Type')),
                ('preview_page', models.BigIntegerField(default=0, help_text='Number of page that this page will come after it.', verbose_name='Preview Page')),
                ('is_blank', models.BooleanField(default=False, help_text='For determine if the page is blank.', verbose_name='Is blank?')),
                ('is_finished', models.BooleanField(default=False, help_text='For determine if the page is finished to rewrite all text.', verbose_name='Is Finished?')),
                ('image', models.ImageField(default='default_page.jpg', help_text='Picture of the page.', upload_to='page_pics', verbose_name='Image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pages', related_query_name='page', to='library.book', verbose_name='Book Id')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pages', related_query_name='page', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
            },
        ),
        migrations.CreateModel(
            name='Paragraph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Text of paragraph', max_length=100, verbose_name='Paragraph Text')),
                ('preview_paragraph', models.BigIntegerField(default=0, help_text='Number of paragraph in page that this paragraph will come after it.', verbose_name='Preview Paragraph')),
                ('trail_paragraph', models.BigIntegerField(default=0, help_text='Number of paragraph in preview page that this paragraph will complete the text,  for example on paragraph divided in 2 pages.', verbose_name='Trail Paragraph')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paragraphs', related_query_name='paragraph', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paragraphs', related_query_name='paragraph', to='library.page', verbose_name='Location Id')),
            ],
            options={
                'verbose_name': 'paragraph',
                'verbose_name_plural': 'paragraphs',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the publisher.', max_length=100, verbose_name='Publisher Name')),
                ('description', models.TextField(blank=True, help_text='Description about the publisher.', verbose_name='Description')),
                ('logo', models.ImageField(default='default_publisher.jpg', help_text='Logo of the publisher.', upload_to='publisher_logos', verbose_name='Logo')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publishers', related_query_name='publisher', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'publisher',
                'verbose_name_plural': 'publishers',
            },
        ),
        migrations.CreateModel(
            name='Writer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the writer.', max_length=100, verbose_name='Writer Name')),
                ('born_date', models.DateField(blank=True, help_text='Born date of writer.', null=True, verbose_name='Writer Born')),
                ('died_date', models.DateField(blank=True, help_text='Died date of writer.', null=True, verbose_name='Writer Died ')),
                ('profile', models.TextField(blank=True, help_text='Profile about the writer.', verbose_name='Profile')),
                ('image', models.ImageField(default='default_writer.jpg', help_text='Picture of the writer.', upload_to='writer_pics', verbose_name='Image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='writers', related_query_name='writer', to=settings.AUTH_USER_MODEL, verbose_name='Creator Id')),
            ],
            options={
                'verbose_name': 'writer',
                'verbose_name_plural': 'writers',
            },
        ),
        migrations.CreateModel(
            name='WriterHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the writer.', max_length=100, verbose_name='Writer Name')),
                ('born_date', models.DateField(blank=True, help_text='Born date of writer.', null=True, verbose_name='Writer Born')),
                ('died_date', models.DateField(blank=True, help_text='Died date of writer.', null=True, verbose_name='Writer Died ')),
                ('profile', models.TextField(blank=True, help_text='Profile about the writer.', verbose_name='Profile')),
                ('image', models.ImageField(help_text='Picture of the writer.', upload_to='writer_pics', verbose_name='image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Edited Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='writer_histories', related_query_name='writer_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='writer_histories', related_query_name='writer_history', to='library.writer', verbose_name='Writer Id')),
            ],
            options={
                'verbose_name': 'writer history',
                'verbose_name_plural': 'writer histories',
            },
        ),
        migrations.CreateModel(
            name='PublisherHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the publisher.', max_length=100, verbose_name='Publisher Name')),
                ('description', models.TextField(blank=True, help_text='Description about the publisher.', verbose_name='Description')),
                ('logo', models.ImageField(help_text='Logo of the publisher.', upload_to='publisher_logos', verbose_name='logo')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Edited Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='publisher_histories', related_query_name='publisher_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publisher_histories', related_query_name='publisher_history', to='library.publisher', verbose_name='Publisher Id')),
            ],
            options={
                'verbose_name': 'publisher history',
                'verbose_name_plural': 'publisher histories',
            },
        ),
        migrations.CreateModel(
            name='ParagraphHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(help_text='Text of paragraph', max_length=100, verbose_name='Paragraph Text')),
                ('preview_paragraph', models.BigIntegerField(default=0, help_text='Number of paragraph in page that this paragraph will come after it.', verbose_name='Preview Paragraph')),
                ('trail_paragraph', models.BigIntegerField(default=0, help_text='Number of paragraph in preview page that this paragraph will complete the text,  for example on paragraph divided in 2 pages.', verbose_name='Trail Paragraph')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='paragraph_histories', related_query_name='paragraph_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('paragraph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paragraph_histories', related_query_name='paragraph_history', to='library.paragraph', verbose_name='Paragraph Id')),
            ],
            options={
                'verbose_name': 'paragraph history ',
                'verbose_name_plural': 'paragraph histories',
            },
        ),
        migrations.CreateModel(
            name='PageHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Number of the page(1,2,... | a,b,...).', max_length=100, verbose_name='Page Number')),
                ('page_type', models.SmallIntegerField(choices=[(1, 'Page'), (2, 'Page')], default=1, help_text='Type of page.', verbose_name='Page Type')),
                ('preview_page', models.BigIntegerField(default=0, help_text='Number of page this page will come after.', verbose_name='Preview Page')),
                ('is_blank', models.BooleanField(default=False, help_text='For determine if the page is blank.', verbose_name='Is blank?')),
                ('is_finished', models.BooleanField(default=False, help_text='For determine if the page is finished to rewrite all text.', verbose_name='Is Finished?')),
                ('image', models.ImageField(default='default_page.jpg', help_text='Picture of the page.', upload_to='page_pics', verbose_name='Image')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='page_histories', related_query_name='page_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_histories', related_query_name='page_history', to='library.page', verbose_name='Page Id')),
            ],
            options={
                'verbose_name': 'page history ',
                'verbose_name_plural': 'page histories',
            },
        ),
        migrations.CreateModel(
            name='LocationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the location.', max_length=100, verbose_name='Location Name')),
                ('description', models.TextField(blank=True, help_text='Description about the location.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Edited Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='location_histories', related_query_name='location_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_histories', related_query_name='location_history', to='library.location', verbose_name='Location Id')),
            ],
            options={
                'verbose_name': 'location history',
                'verbose_name_plural': 'location histories',
            },
        ),
        migrations.CreateModel(
            name='JobHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the job.', max_length=100, verbose_name='Job Name')),
                ('description', models.TextField(blank=True, help_text='Description about the job.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Edited Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='job_histories', related_query_name='job_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_histories', related_query_name='job_history', to='library.job', verbose_name='Job Id')),
            ],
            options={
                'verbose_name': 'job history',
                'verbose_name_plural': 'job histories',
            },
        ),
        migrations.CreateModel(
            name='GenreHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the genre.', max_length=100, verbose_name='Genre Name')),
                ('description', models.TextField(blank=True, help_text='Description about the genre.', verbose_name='Description')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Edited Timestamp')),
                ('editor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='genre_histories', related_query_name='genre_history', to=settings.AUTH_USER_MODEL, verbose_name='Editor Id')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genre_histories', related_query_name='genre_history', to='library.genre', verbose_name='Genre Id')),
            ],
            options={
                'verbose_name': 'genre history',
                'verbose_name_plural': 'genre histories',
            },
        ),
        migrations.CreateModel(
            name='BookWriterHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.bookhistory')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.job')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.writer')),
            ],
        ),
        migrations.CreateModel(
            name='BookWriter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.job')),
                ('writer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='library.writer')),
            ],
        ),
        migrations.AddField(
            model_name='bookhistory',
            name='genres',
            field=models.ManyToManyField(related_name='book_histories', related_query_name='book_history', to='library.Genre', verbose_name='Genre Id'),
        ),
        migrations.AddField(
            model_name='bookhistory',
            name='languages',
            field=models.ManyToManyField(related_name='book_histories', related_query_name='book_history', to='language.Language', verbose_name='Language Id'),
        ),
        migrations.AddField(
            model_name='bookhistory',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='book_histories', related_query_name='book_history', to='library.location', verbose_name='Location Id'),
        ),
        migrations.AddField(
            model_name='bookhistory',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='book_histories', related_query_name='book_history', to='library.publisher', verbose_name='Publisher Id'),
        ),
        migrations.AddField(
            model_name='bookhistory',
            name='writers',
            field=models.ManyToManyField(related_name='book_histories', related_query_name='book_history', to='library.Writer', verbose_name='Writer Id'),
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(related_name='books', related_query_name='book', to='library.Genre', verbose_name='Genre Id'),
        ),
        migrations.AddField(
            model_name='book',
            name='languages',
            field=models.ManyToManyField(related_name='books', related_query_name='book', to='language.Language', verbose_name='Language Id'),
        ),
        migrations.AddField(
            model_name='book',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='books', related_query_name='book', to='library.location', verbose_name='Location Id'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='books', related_query_name='book', to='library.publisher', verbose_name='Publisher Id'),
        ),
        migrations.AddField(
            model_name='book',
            name='writers',
            field=models.ManyToManyField(related_name='books', related_query_name='book', to='library.Writer', verbose_name='Writer Id'),
        ),
    ]
